@page "/gridzone/{id}"
@inject HttpClient client

<h3>GridZone</h3>

<div class="container">
    <div class="row row-cols-1 col-md-6">
        @foreach (var row in rows)
        {
            <div class="col border rounded fw-bold text-center mb-2" @onclick="() => ShowPanel(row)" style=@(selectedRow==row ? "border-color:blue !important" : "border-color:black !important")>
                @if (row.Type != null)
                {
                    @if (row.Type == "TextBox")
                    {
                        <input class="col-md-6 mt-1 mb-1 text-center" style="font-size:2ex !important" placeholder="Text" type="text">


                    }
                    else if (row.Type == "RadioButton")
                    {
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                            <label class="form-check-label" for="flexCheckDefault">
                                RadioButton
                            </label>
                        </div>

                    }
                    else if (row.Type == "ComboBox")
                    {
                        <select class="mt-2 mb-2" style="font-size:2ex !important;">
                            <option disabled selected>Выберите элемент из списка</option>
                        </select>

                    }
                }
                else
                {
                    <h5>Пусто</h5>
                }

            </div>

        }
        <div class="btn btn-primary text-center" @onclick="() => CreateRow()">Добавить строку</div>
        <div class="btn btn-primary text-center" data-bs-toggle="modal" data-bs-target="#exampleModal">Получить код модели</div>

        <div class="modal" id="exampleModal" tabindex="-1">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label>@CreateModel()</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                    </div>
                </div>
            </div>
        </div>
       
    </div>


</div>

@if (selectedRow is not null)
{
    <div class="toolbox border" style="display:block">
        <div class="element-panel">
            <h3>
                Элементы Управления
            </h3>

            <ul>
                <li>
                    <div class="mt-2 mb-2" @onclick="@(() => AddElement("TextBox"))">
                        <img width="100" height="50" src="images/input.jpg">
                    </div>
                </li>

                <li>
                    <div class="mt-2 mb-2" @onclick="@(() => AddElement("RadioButton"))">
                        <img width="100" height="50" src="images/radioButton.jpg">
                    </div>
                </li>

                <li>
                    <div class="mt-2 mb-2" @onclick="@(() => AddElement("ComboBox"))">
                        <img width="100" height="50" src="images/comboBox.jpg">
                    </div>
                </li>
            </ul>
        </div>
        <div class="col-md-12 d-flex justify-content-center mt-3">
            <button class="btn btn-info ps-3 pe-3" @onclick="() => ClearRow()">Очистить ячейку</button>
        </div>
        <div class="col-md-12 d-flex justify-content-center mt-3">
            <button class="btn btn-danger ps-3 pe-3" @onclick="() => DeleteRow(selectedRow)">Удалить ячейку</button>
        </div>
    </div>
}


@code {
    [Parameter]
    public string id
    {
        get;
        set;
    } = "";

    private List<Row> rows = new List<Row>();

    private Row selectedRow = null;
    private string formName = "";

    protected override async Task OnInitializedAsync()
    {
        var forms = await client.GetFromJsonAsync<List<Form>>("api/Form");
        formName = forms.FirstOrDefault(x => x.Id == new Guid(id)).Name;
        await Refresh();
    }

    private async Task Refresh()
    {
        rows = await client.GetFromJsonAsync<List<Row>>($"api/Row?id={id}");
        StateHasChanged();
        //Thread.Sleep(500);
    }

    private async Task UpdateRow(Row row)
    {
        await client.PutAsJsonAsync($"api/Row", row);
        await Refresh();
    }

    private async Task AddElement(string type)
    {
        selectedRow.Type = type;
        await UpdateRow(selectedRow);
    }

    private async Task DeleteRow(Row row)
    {
        await client.DeleteAsync("api/Row/?id=" + row.Id);
        await Refresh();
    }

    private async Task CreateRow()
    {
        await client.PostAsJsonAsync<Row>("api/Row", new Row() { Id = Guid.NewGuid(), IdForm = new Guid(id) });
        await Refresh();
    }

    private async Task ClearRow()
    {
        selectedRow.Type = null;
        await UpdateRow(selectedRow);
    }

    private void ShowPanel(Row row)
    {
        if (selectedRow == null)
        {
            selectedRow = row;
        }
        else
        {
            if (selectedRow == row)
            {
                selectedRow = null;

            }
            else
            {
                selectedRow = row;
            }
        }

    }

    private string CreateModel()
    {
        
        string res = $"class {formName}\n" + '{' + "\n public Guid Id { get; set; }\n";
        int i = 1;
        foreach (Row row in rows)
        {
            switch (row.Type)
            {
                case "TextBox": res += "public string? Text" + i + " {get; set; }\n"; break;
                case "RadioButton": res += "public bool? Check" + i + " {get; set; }\n"; break;
                case "ComboBox": res += ""; break;
            }
            i++;
        }
        res += "}";
        return res;
    }
}

<style>
    .toolbox {
        position: fixed;
        top: 0;
        right: 0;
        width: 25%;
        height: 100vh;
        background-color: #f8f9fa;
        border-left: 1px solid #ccc;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        z-index: 1000;
        transition: width 0.3s;
    }

    .element-panel {
        padding: 1rem;
        border-bottom: 1px solid #ccc;
    }

    .properties-panel {
        padding: 1rem;
        flex-grow: 1;
        overflow-y: auto;
    }

    h3, h5 {
        margin: 0;
        padding: 0;
    }

    h5 {
        cursor: grab;
    }

    table {
        width: 100%;
        margin-bottom: 0 !important;
    }

    th, td {
        padding: 0.5rem;
        border-bottom: 1px solid #ccc;
    }

    input {
        width: 100%;
        padding: 0.25rem;
    }

    .bg-green {
        background-color: green;
    }

    .bg-red {
        background-color: red;
    }
</style>
