@page "/drag/{id}"
@using BlazorApp2.Client.Pages
@using Microsoft.AspNetCore.Components.Rendering
@using System.Text.Json

@inject HttpClient client
@inject IJSRuntime jsRuntime

<button class="btn bg-primary mb-2" @onclick="Modify">@(CanModify ? "Сохранить" : "Редактировать")</button>

<div class="dropArea " style="user-select: none;" @ondrop="(e) => Drop(e)" @onmousemove="(e) => ImageMove(e)" @onmouseup=ImageUp ondragover="event.preventDefault()" ondragenter="event.preventDefault()">
    <h1>Конструктор</h1>
    <h2 class="ms-2 mt-2 mb-2">Drag&Drop - Зона</h2>
    <div class="border border-dark" style="width:750px; height:750px;position:absolute">
        <div style="">
            @foreach (var item in droppedItems)
            {
                <div class="mt-2">

                    @if (item.Type == "TextBox")
                    {
                        <div class="border border-dark d-inline-block" id="" @onmousedown="(e) => ImageClick(e, item)" style=@($"position:absolute;width:{item.Width}px;height:{item.Height}px; top:{item.MarginTop}px; left:{item.MarginLeft}px;")>
                            <img draggable="false" src="images/input.jpg">
                        </div>
                    }
                    else if (item.Type == "RadioButton")
                    {
                        <img width=@item.Width height=@item.Height src="images/radioButton.jpg">
                    }
                    else if (item.Type == "ComboBox")
                    {
                        <img width=@item.Width height=@item.Height src="images/comboBox.jpg">
                    }

                    @if (CanModify)
                    {
                        <button class="d-inline-block" style=@($"position:absolute; top:{item.MarginTop}px; left:{item.MarginLeft}px;") @onclick="() => DeleteElement(item)">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-trash" width="12" height="12" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <path d="M4 7l16 0"></path>
                                <path d="M10 11l0 6"></path>
                                <path d="M14 11l0 6"></path>
                                <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"></path>
                                <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"></path>
                            </svg>
                        </button>
                    }
                </div>
                <br />
            }
        </div>
    </div>
</div>


<div class="toolbox border" style=@(CanModify ? "display:block" : "display:none")>
    <div class="element-panel">
        <h3>
            Элементы Управления
        </h3>

        <ul>

            <li>
                <div class="mt-2 mb-2" draggable="true" @ondragstart="@(() => DragStart("TextBox"))">
                    <img width="100" height="50" src="images/input.jpg">
                </div>
            </li>

            <li>
                <div class="mt-2 mb-2" draggable="true" @ondragstart="@(() => DragStart("RadioButton"))">
                    <img width="100" height="50" src="images/radioButton.jpg">
                </div>
            </li>

            <li>
                <div class="mt-2 mb-2" draggable="true" @ondragstart="@(() => DragStart("ComboBox"))">
                    <img width="100" height="50" src="images/comboBox.jpg">
                </div>
            </li>

        </ul>

    </div>
</div>


@code {
    [Parameter]
    public string id
    {
        get;
        set;
    } = "";

    private List<Template> droppedItems = new List<Template>();

    private string currentDragType = "";

    private Template currentResizebleTemplate = null;

    private Template currentDraggbleTemplate = null;

    private bool CanModify = false;

    public Element selectedElement { get; set; }

    private bool isDraggingFromToolbox = false;

    private bool clicked = false;

    private int startX = 0;
    private int startY = 0;

    private async Task Drop(MouseEventArgs e)
    {
        if (isDraggingFromToolbox)
        {
            var template = new Template() { Type = currentDragType, Id = Guid.NewGuid(), Width = 100, Height = 50, IdForm = new Guid(id), MarginLeft = (int)e.OffsetX, MarginTop = (int)e.OffsetY };
            await client.PostAsJsonAsync<Template>("api/Template", template);
            Refresh();
            isDraggingFromToolbox = false;
        }
    }

    private async Task ImageClick(MouseEventArgs e, Template template)
    {
        clicked =true;
        if (e.OffsetX <= template.Width * 1.2 && e.OffsetX >= template.Width * 0.8 && e.OffsetY <= template.Height * 1.2 && e.OffsetY >= template.Height * 0.8)
        {
            startX = (int)e.ClientX;
            startY = (int)e.ClientY;
            currentResizebleTemplate = template;
        }
        else if (e.OffsetX <= template.Width * 0.7 && e.OffsetX >= template.Width * 0.3 && e.OffsetY <= template.Height * 0.7 && e.OffsetY >= template.Height * 0.3)
        {
            startX = (int)e.ClientX;
            startY = (int)e.ClientY;
            currentDraggbleTemplate = template;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        droppedItems = await client.GetFromJsonAsync<List<Template>>($"api/Template?id={id}");
        StateHasChanged();
        //Thread.Sleep(500);
    }
    private void ImageMove(MouseEventArgs e)
    {if (clicked)
        {
            if (currentResizebleTemplate != null)
            {
                currentResizebleTemplate.Width += (int)e.ClientX - startX;
                currentResizebleTemplate.Height += (int)e.ClientY - startY;
                startX = (int)e.ClientX;
                startY = (int)e.ClientY;
            }
            if (currentDraggbleTemplate != null)
            {
                currentDraggbleTemplate.MarginLeft += (int)e.ClientX - startX;
                currentDraggbleTemplate.MarginTop += (int)e.ClientY - startY;
                startX = (int)e.ClientX;
                startY = (int)e.ClientY;

                // Выравнивание элементов
                foreach (var item in droppedItems)
                {
                    if (item != currentDraggbleTemplate)
                    {
                        // Проверка по вертикали
                        if (Math.Abs(item.MarginTop - currentDraggbleTemplate.MarginTop) < 10)
                        {
                            currentDraggbleTemplate.MarginTop = item.MarginTop;
                        }

                        // Проверка по горизонтали
                        if (Math.Abs(item.MarginLeft - currentDraggbleTemplate.MarginLeft) < 10)
                        {
                            currentDraggbleTemplate.MarginLeft = item.MarginLeft;
                        }
                    }
                }
            }
        }
    }


    private void ImageUp()
    {
        if (currentResizebleTemplate != null)
        {
            UpdateElement(currentResizebleTemplate);
            currentResizebleTemplate = null;
        }
        if (currentDraggbleTemplate != null)
        {
            UpdateElement(currentDraggbleTemplate);
            currentDraggbleTemplate = null;
        }
        clicked = false;
    }

  

    private async Task UpdateElement(Template element)
    {
        await client.PutAsJsonAsync($"api/Template", element);
        await Refresh();
    }

    private async Task DeleteElement(Template element)
    {
        await client.DeleteAsync("api/Template/?id=" + element.Id);
        await Refresh();
    }

    private void DragStart(string item)
    {
        currentDragType = item;
        isDraggingFromToolbox = true;
    }

    private void Modify()
    {
        CanModify = !CanModify;
        selectedElement = null;
    }

    // private List<Form> forms = new List<Form>();
    // private Guid selectedFormId = Guid.Empty;
    // private Dictionary<Guid, List<Template>> formTemplates = new Dictionary<Guid, List<Template>>();

    // private void CreateNewForm()
    // {
    //     var newForm = new Form { Id = Guid.NewGuid(), Name = "Новая форма", Elements = new List<Element>(), Templates = new List<Template>() };
    //     forms.Add(newForm);
    //     selectedFormId = newForm.Id;

    //     // Ensure an empty list exists for the new form in formTemplates
    //     if (!formTemplates.ContainsKey(selectedFormId))
    //     {
    //         formTemplates[selectedFormId] = new List<Template>();
    //     }

    //     droppedItems = new List<Template>();
    // }

    // private void SwitchForm(Guid formId)
    // {
    //     selectedFormId = formId;
    //     droppedItems.Clear();
    // }
}

<style>
    .toolbox {
        position: fixed;
        top: 0;
        right: 0;
        width: 25%;
        height: 100vh;
        background-color: #f8f9fa;
        border-left: 1px solid #ccc;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        z-index: 1000;
        transition: width 0.3s;
    }

    .element-panel {
        padding: 1rem;
        border-bottom: 1px solid #ccc;
    }

    .properties-panel {
        padding: 1rem;
        flex-grow: 1;
        overflow-y: auto;
    }

    h3, h5 {
        margin: 0;
        padding: 0;
    }

    h5 {
        cursor: grab;
    }

    table {
        width: 100%;
        margin-bottom: 0 !important;
    }

    th, td {
        padding: 0.5rem;
        border-bottom: 1px solid #ccc;
    }

    input {
        width: 100%;
        padding: 0.25rem;
    }

    .bg-green {
        background-color: green;
    }

    .bg-red {
        background-color: red;
    }
</style>
