@using BlazorApp2.Client.Pages
@using Microsoft.AspNetCore.Components.Rendering
@using System.Text.Json

@page "/drag"
@inject HttpClient client

<button class="btn bg-primary mb-2" @onclick="Modify">@(CanModify ? "Сохранить" : "Редактировать")</button>

<div class="dropArea col-lg-12" @ondrop=Drop ondragover="event.preventDefault()" ondragenter="event.preventDefault()">
    <div class="border" style="height:50rem !important;">
        <h2 class="ms-2 mt-2 mb-2">Drag&Drop - Зона</h2>
        <select class="form-select" @onchange="ChangeBtnCollor">
            <option value="blue">Зеленная кнопка</option>
            <option value="red">Красная кнопка</option>
        </select>

        <h3 class="mb-2 mt-2">Button color is @btnCollor</h3>
        @if (btnCollor == "green")
        {
            <button class="btn btn-success" name="greenBtn">Зеленная кнопка</button>
        }
        else
        {
            <button class="btn btn-danger" name="redBtn">Красная кнопка</button>
        }


        <div style="margin-top: 1rem;">
           
            <label for="firstComboBox">Select an option in the first ComboBox:</label>
            <select id="firstComboBox" @bind="selectedFirstOption">
                <option value="">Select an option</option>
                <option value="option1">Option 1</option>
                <option value="option2">Option 2</option>
            </select>
        </div>

        <div style="margin-top: 1rem;">
            
            <label for="secondComboBox">Values in the second ComboBox:</label>
            <select id="secondComboBox">
                @foreach (var option in GetSecondComboBoxOptions(selectedFirstOption))
                {
                    <option value="@option">@option</option>
                }
            </select>
        </div>
      
        @foreach (var item in droppedItems)
        {
            @if (item.Type == "TextBox")
            {
                <div @onclick="() => GetProperties(item)">
                    <TextBox Element="item"></TextBox>
                </div>
            }
            else if (item.Type == "RadioButton")
            {
                <div @onclick="() => GetProperties(item)">
                    <RadioButton Element="item"></RadioButton>
                </div>
            }
            else if (item.Type == "ComboBox")
            {
                <div @onclick="() => GetOptions(item)">
                    <ComboBox Element="item"></ComboBox>
                </div>
            }
            <br />
        }
    </div>
</div>

<div class="toolbox border" style=@(CanModify ? "display:block" : "display:none")>
    <div class="element-panel">
        <h3>
            Элементы Управления

        </h3>
        <ul>
            <li>
                <h5 class="mt-2 mb-2" draggable="true" @ondragstart="@(() => DragStart("TextBox"))">
                    TextBox
                </h5>
                <h5 class="mt-2 mb-2" draggable="true" @ondragstart="@(() => DragStart("RadioButton"))">
                    RadioButton
                </h5>
                <h5 class="mt-2 mb-2" draggable="true" @ondragstart="@(() => DragStart("ComboBox"))">
                    ComboBox
                </h5>
            </li>
        </ul>
    </div>
    @if (selectedElement != null)
    {
        <div class="properties-panel">
            <div class="table-responsive">
                <table class="table card-table table-vcenter" style="margin-bottom:0rem !important">
                    <thead>
                        <tr>
                            <th class="w-1 pe-0">Property</th>
                            <th class="w-1">Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (selectedElement.Type == "TextBox")
                        {
                            @foreach (var property in Properties)
                            {
                                @if (property.Key != "Checked")
                                {
                                    <tr>
                                        <td>@property.Key</td>
                                        <td><input @bind=@Properties[property.Key] @onblur="() => UpdateElement(selectedElement)" /></td>
                                    </tr>
                                }
                            }
                        }
                        @if (selectedElement.Type == "RadioButton")
                        {
                            <tr>
                                <td>Checked</td>
                                <td><input @bind=@Properties["Checked"] @onblur="() => UpdateElement(selectedElement)" /></td>
                            </tr>
                        }
                        @if (selectedElement.Type == "ComboBox")
                        {
                            @foreach (var option in ComboBoxOptions)
                            {
                                <tr>
                                    <td class="text-truncate">@option.Key</td>
                                    <td>@option.Value</td>
                                </tr>
                            }
                            <tr>
                                <td class="text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Ключ будет сгенерирован автоматически">Key</td>
                                <td><input @bind=@newOption/></td>
                            </tr>

                            <button class="btn bg-success text-white mt-2 d-flex justify-content-end" @onclick="() => UpdateElementOptions(selectedElement)">Добавить option</button>
                        }

                    </tbody>
                </table>
            </div>
        </div>
    }



</div>

@code {
    private List<Element> droppedItems = new List<Element>();

    private string currentDragType = "";

    private string btnCollor = "green";

    private string newOption = "";

    private bool CanModify = false;

    public Element selectedElement { get; set; }

    private Dictionary<string, string> Properties;

    private Dictionary<string, string> ComboBoxOptions = new Dictionary<string, string>();


    private bool isDraggingFromToolbox = false;

    private void ChangeBtnCollor()
    {
        if (btnCollor == "green")
            btnCollor = "red";
        else
            btnCollor = "green";
    }

    private async Task Drop()
    {
        if (isDraggingFromToolbox)
        {
            await client.PostAsJsonAsync<Element>("api/Element/", new Element() { Type = currentDragType, Id = Guid.NewGuid() });
            isDraggingFromToolbox = false;
            Refresh();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        droppedItems = await client.GetFromJsonAsync<List<Element>>("api/Element");
        StateHasChanged();
    }

    private async Task UpdateElement(Element element)
    {

        element.SetProperties(Properties);
        await client.PutAsJsonAsync($"api/Element", element);
        await Refresh();
    }
    private async Task UpdateElementOptions(Element element)
    {
        ComboBoxOptions.Add(Guid.NewGuid().ToString(), newOption);
        element.SetOptions(ComboBoxOptions);
        await client.PutAsJsonAsync($"api/Element", element);
        await Refresh();
    }


    private void DragStart(string item)
    {
        currentDragType = item;
        isDraggingFromToolbox = true;

    }

    private void GetProperties(Element item)
    {
        if (CanModify)
        {
            selectedElement = item;
            Properties = item.GetProperties();
        }
    }
    private void GetOptions(Element item)
    {
        if (CanModify)
        {
            selectedElement = item;
            ComboBoxOptions = item.GetOptions();
        }
    }

    private void Modify()
    {
        CanModify = !CanModify;
        selectedElement = null;
    }

    private void Reset()
    {
        selectedElement = null;
    }
    private string selectedFirstOption = "";

    private IEnumerable<string> GetSecondComboBoxOptions(string firstOption)
    {
        if (firstOption == "option1")
        {
            return new List<string>
            {
                "Option A",
                "Option B",
                "Option C"
            };
        }
        else if (firstOption == "option2")
        {
            return new List<string>
            {
                "Option X",
                "Option Y",
                "Option Z"
            };
        }

        return Enumerable.Empty<string>();
    }
}

<style>
    .toolbox {
        position: fixed;
        top: 0;
        right: 0;
        width: 25%; /* Adjust the width as needed */
        height: 100vh;
        background-color: #f8f9fa; /* Set your desired background color */
        border-left: 1px solid #ccc;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        z-index: 1000;
        transition: width 0.3s;
    }

    .element-panel {
        padding: 1rem;
        border-bottom: 1px solid #ccc;
    }

    .properties-panel {
        padding: 1rem;
        flex-grow: 1;
        overflow-y: auto;
    }

    /* Adjust styles for your headings, inputs, and other elements as needed */
    h3, h5 {
        margin: 0;
        padding: 0;
    }

    h5 {
        cursor: grab;
    }

    table {
        width: 100%;
        margin-bottom: 0 !important;
    }

    th, td {
        padding: 0.5rem;
        border-bottom: 1px solid #ccc;
    }

    input {
        width: 100%;
        padding: 0.25rem;
    }

    .bg-green {
        background-color: green;
    }

    .bg-red {
        background-color: red;
    }
</style>
