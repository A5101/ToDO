@using BlazorApp2.Client.Pages
@using Microsoft.AspNetCore.Components.Rendering
@page "/drag"

<button class="btn bg-primary mb-2" @onclick="Modify">@(CanModify ? "Сохранить" : "Редактировать")</button>

<div class="dropArea col-lg-12" @ondrop=Drop ondragover="event.preventDefault()" ondragenter="event.preventDefault()">
    <div class="border" style="height:50rem !important;">
        <h2 class="ms-2 mt-2 mb-2">Drag&Drop - Зона</h2>
        @foreach (var item in droppedItems)
        {
            @if (item.Type == "TextBox")
            {
                <div @onclick="() => GetProperties(item)">
                    <TextBox Element="item"></TextBox>
                </div>
            }
            else if (item.Type == "RadioButton")
            {
                <div @onclick="() => GetProperties(item)">
                    <RadioButton Element="item"></RadioButton>
                </div>
            }
            else if (item.Type == "ComboBox")
            {
                <div @onclick="() => GetProperties(item)">
                    <ComboBox Element="item"></ComboBox>
                </div>
            }
            <br />
        }
    </div>
</div>

<div class="toolbox border" style=@(CanModify ? "display:block" : "display:none")>
    <div class="element-panel">
        <h3>Элементы Управления

        </h3>
        <ul>
            <li>
                <h5 class="mt-2 mb-2" draggable="true" @ondragstart="@(() => DragStart("TextBox"))">
                    TextBox
                </h5>
                <h5 class="mt-2 mb-2" draggable="true" @ondragstart="@(() => DragStart("RadioButton"))">
                    RadioButton
                </h5>
                <h5 class="mt-2 mb-2" draggable="true" @ondragstart="@(() => DragStart("ComboBox"))">
                    ComboBox
                </h5>
            </li>
        </ul>
    </div>
    @if (selectedElement != null)
    {
        <div class="properties-panel">
            <div class="table-responsive">
                <table class="table card-table table-vcenter" style="margin-bottom:0rem !important">
                    <thead>
                        <tr>
                            <th class="w-1 pe-0">Property</th>
                            <th class="w-1">Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (selectedElement.Type == "TextBox")
                        {
                            @foreach (var property in selectedElement.Properties)
                            {
                                @if (property.Key != "Checked")
                                {
                                    <tr>
                                        <td>@property.Key</td>
                                        <td><input @bind=@selectedElement.Properties[property.Key] /></td>
                                    </tr>
                                }
                            }
                        }
                        @if (selectedElement.Type == "RadioButton")
                        {
                        <tr>
                            <td>Checked</td>
                            <td><input @bind=@selectedElement.Properties["Checked"] /></td>
                        </tr>
                        }
                        @if (selectedElement.Type == "ComboBox")
                        {
                            <tr>
                                <td>Value</td>
                                <td><input @bind=@selectedElement.Properties["Text"] /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

</div>

@code {
    private List<Element> droppedItems = new List<Element>();

    private string currentDragType = "";

    private bool CanModify = false;

    private Element selectedElement;

    private bool isDraggingFromToolbox = false;

    private void Drop()
    {
        if (isDraggingFromToolbox)
        {
            droppedItems.Add(new Element() { Type = currentDragType });
            isDraggingFromToolbox = false;
        }
    }

    private void DragStart(string item)
    {
        currentDragType = item;
        isDraggingFromToolbox = true;

    }

    private void GetProperties(Element item)
    {
        if (CanModify)
        {
            selectedElement = item;
        }
    }

    private void Modify()
    {
        CanModify = !CanModify;
        selectedElement = null;
    }

    private void Reset()
    {
        selectedElement = null;
    }
}

<style>
    .toolbox {
        position: fixed;
        top: 0;
        right: 0;
        width: 25%; /* Adjust the width as needed */
        height: 100vh;
        background-color: #f8f9fa; /* Set your desired background color */
        border-left: 1px solid #ccc;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        z-index: 1000;
        transition: width 0.3s;
    }

    .element-panel {
        padding: 1rem;
        border-bottom: 1px solid #ccc;
    }

    .properties-panel {
        padding: 1rem;
        flex-grow: 1;
        overflow-y: auto;
    }

    /* Adjust styles for your headings, inputs, and other elements as needed */
    h3, h5 {
        margin: 0;
        padding: 0;
    }

    h5 {
        cursor: grab;
    }

    table {
        width: 100%;
        margin-bottom: 0 !important;
    }

    th, td {
        padding: 0.5rem;
        border-bottom: 1px solid #ccc;
    }

    input {
        width: 100%;
        padding: 0.25rem;
    }

    .bg-green {
        background-color: green;
    }

    .bg-red {
        background-color: red;
    }
</style>
